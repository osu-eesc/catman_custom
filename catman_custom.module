<?php
/**
 * @file
 * Code for the Catman Custom feature.
 */

include_once 'catman_custom.features.inc';


/**
 * Implements hook_help().
 */
function catman_custom_help($path, $arg) {
  switch ($path) {
    // case 'admin/commerce/reports/catman':
    //   return '<p>' . t('Catman specific reports') . '</p>';

    case 'admin/commerce/reports/catman/inventory':
      return '<h3>' . t('Catman Inventory Report') . '</h3> <em>' . t('Click the CSV button to download report') . '</em>' ;

    case 'admin/commerce/reports/catman/unpaid-invoices':
      return '<h3>' . t('Unpaid Invoices Report') . '</h3> <em>' . t('Click the CSV button to download report') . '</em>';

    case 'admin/commerce/reports/catman/reconciliation-all-payments':
      return '<h3>' . t('Account Receivables Reconciliation Report - totals by date') . '</h3> <em>' . t('Click the CSV button to download report') . '</em>';

    case 'admin/commerce/reports/catman/reconciliation':
      return '<h3>' . t('Account Receivables Reconciliation Report - totals by payment method') . '</h3> <em>' . t('Click the CSV button to download report') . '</em>';
  }
}


/**
 * Implements hook_commerce_line_item_summary_link_info_alter().
 */
function catman_custom_commerce_line_item_summary_link_info_alter(&$links) {

  // Alter the weight of the checkout link to display before the view cart link.
  if (!empty($links['view_cart'])) {
    $links['view_cart']['title'] = t('Cart / Checkout');
  }

}

/**
* Implements hook_node_view().
* don't display store data if add to store field is not checked
*/
function catman_custom_node_view($node, $view_mode, $langcode) {

  if ($node->field_add_to_store['und'][0]['value'] == 0) {
    unset($node->field_publication_product);
  }

}


/**
 * Implements hook_form_submit().
 */
function osu_catalog_publication_node_form_submit($form, &$form_state) {
    //dpm($form, 'form array');

  if ($form_state['values']['field_add_to_store']['und'][0]['value'] == 0) {
    //unset($form_state['values']['field_publication_product']['und'][0]['value']);
    unset($node->field_publication_product);
  }


   // get node alias for use in file/link redirects and for setting SKU
  $aliaspath = strtolower($form_state['build_info']['args'][0]->field_series_prefix['und'][0]['value']) . $form_state['build_info']['args'][0]->field_series_number['und'][0]['value'] . strtolower($form_state['build_info']['args'][0]->field_series_suffix['und'][0]['value']);

  // set redirect source paths
  $redirect_source_link = $aliaspath . '/view';

  // create magic link redirect if link_or_upload is 1 and link exists
  if ($form_state['values']['field_link_or_upload']['und'][0]['value'] == 1 && $form_state['values']['field_catman_link']['und'][0]['url']) {

    $redirect_current_link = $form_state['build_info']['args'][0]->field_catman_link['und'][0]['url'];
    $redirect_destination_link = $form_state['values']['field_catman_link']['und'][0]['url'];


    try {
      // create redirect class with redirect values
      $redirect = new stdClass();

      redirect_object_prepare(
        $redirect,
        array(
          'source' => $redirect_source_link,
          'source_options' => array(),
          'redirect' => $redirect_destination_link,
          'redirect_options' => array(),
          'language' => LANGUAGE_NONE,
        )
      );

      // see if redirect exists, if not create it
      $hash = redirect_hash($redirect);

      if (!redirect_load_by_hash($hash)) {
        redirect_save($redirect);
        // log action for debugging
        watchdog('catman_custom', 'Link redirect created: %link_redirect', array('%link_redirect' => $redirect->source), WATCHDOG_NOTICE, $link = NULL);
      }

    } // try

    // log any errors
    catch (Exception $e) {
      watchdog('catman_custom', 'Link redirect error: %exception', array('%exception' => $e), WATCHDOG_NOTICE, $link = NULL);
    }

  }

  else {

    try {

      // delete invalid redirect if it exists
      if (redirect_delete_by_path($redirect_source_link)) {
        // log deletion
        $delete_redirect = new stdClass();
        $delete_redirect->source = $redirect_source_link;

        watchdog('catman_custom', 'Link redirect deleted: %delete_redirect', array('%delete_redirect' => $delete_redirect->source), WATCHDOG_NOTICE, $link = NULL);
      }

    } // try

    // log any errors
    catch (Exception $e) {
      watchdog('catman_custom', 'Link redirect error: %exception', array('%exception' => $e), WATCHDOG_NOTICE, $link = NULL);
    }

    // update redirect if link changed
    if ($redirect_current_link != $redirect_destination_link) {

      try {
        $redirect = new stdClass();

        redirect_object_prepare(
          $redirect,
            array(
              'source' => $redirect_source_link,
              'source_options' => array(),
              'redirect' => $redirect_destination_link,
              'redirect_options' => array(),
              'language' => LANGUAGE_NONE,
            )
        );

        // delete invalid redirect if it exists
        if (redirect_delete_by_path($redirect_source_link)) {

          // log deletion
          $delete_redirect = new stdClass();
          $delete_redirect->source = $redirect_source_link;

          watchdog('catman_custom', 'Link redirect deleted: %delete_redirect', array('%delete_redirect' => $delete_redirect->source), WATCHDOG_NOTICE, $link = NULL);
        }

        // now add correct redirect
        if (!redirect_load_by_source($redirect_source_link)) {
          redirect_save($redirect);
          // log action for debugging
          watchdog('catman_custom', 'Link redirect created (update): %link_redirect', array('%link_redirect' => $redirect->source), WATCHDOG_NOTICE, $link = NULL);
        }

      }  // try

      // log any errors
      catch (Exception $e) {
        watchdog('catman_custom', 'Link redirect update error: %exception', array('%exception' => $e), WATCHDOG_NOTICE, $link = NULL);
      }

    } // $redirect_current_link

  } // magic link

}


/**
 * Implements hook_file_update().
 * create magic pdf link (redirect)
 * create magic epub link (redirect)
 * create magic preview link (redirect)
* create magic excel link (redirect)
 */
function catman_custom_file_update($file) {

  if ( ($file->type == 'pdf_document' || $file->type == 'epub_document' || $file->type == 'excel_file' || $file->type == 'undefined') && ($file->status == 1) ) {

    $pdfupload = strpos($file->uri, 'project/pdf'); // create/delete pdf redirect flag
    $epubupload = strpos($file->uri, 'project/epub'); // create/delete epub redirect flag
    $previewupload = strpos($file->uri, 'project/preview'); // create/delete preview redirect flag
    $excelupload = strpos($file->uri, 'project/excel'); // create/delete excel redirect flag

    if ($pdfupload !== FALSE) {

      $file_alias = str_replace('.pdf', '', $file->filename);

      // set redirect source paths
      $redirect_source = $file_alias . '/viewfile';

      $redirect_destination = variable_get('file_public_path', conf_path() . '/files') . '/' . str_replace('public://', '', $file->uri);

      try {
        // create redirect class with redirect values
        $redirect = new stdClass();

        redirect_object_prepare(
          $redirect,
          array(
            'source' => $redirect_source,
            'source_options' => array(),
            'redirect' => $redirect_destination,
            'redirect_options' => array(),
            'language' => LANGUAGE_NONE,
          )
        );

        // delete invalid redirect if it exists
        if (redirect_delete_by_path($redirect_source)) {

          // log deletion
          $delete_redirect = new stdClass();
          $delete_redirect->source = $redirect_source;

          watchdog('catman_custom', 'PDF redirect deleted: %delete_redirect', array('%delete_redirect' => $delete_redirect->source), WATCHDOG_NOTICE, $link = NULL);

        }

        // now add correct redirect
        if (!redirect_load_by_source($redirect_source)) {
          redirect_save($redirect);
            // log action for debugging
            watchdog('catman_custom', 'PDF redirect created (update): %link_redirect', array('%link_redirect' => $redirect->source), WATCHDOG_NOTICE, $link = NULL);
        }

      }  // try

      // log any errors
      catch (Exception $e) {
        watchdog('catman_custom', 'PDF redirect update error: %exception', array('%exception' => $e), WATCHDOG_NOTICE, $link = NULL);
      }

    } // if $pdfupload



    if ($epubupload !== FALSE) {

      $file_alias = str_replace('.epub', '', $file->filename);

      // set redirect source paths
      $redirect_source = $file_alias . '/epub';

      $redirect_destination = variable_get('file_public_path', conf_path() . '/files') . '/' . str_replace('public://', '', $file->uri);

      try {
        // create redirect class with redirect values
        $redirect = new stdClass();

        redirect_object_prepare(
          $redirect,
          array(
            'source' => $redirect_source,
            'source_options' => array(),
            'redirect' => $redirect_destination,
            'redirect_options' => array(),
            'language' => LANGUAGE_NONE,
          )
        );

        // delete invalid redirect if it exists
        if (redirect_delete_by_path($redirect_source)) {

          // log deletion
          $delete_redirect = new stdClass();
          $delete_redirect->source = $redirect_source;

          watchdog('catman_custom', 'ePub redirect deleted: %delete_redirect', array('%delete_redirect' => $delete_redirect->source), WATCHDOG_NOTICE, $link = NULL);

        }

        // now add correct redirect
        if (!redirect_load_by_source($redirect_source)) {
          redirect_save($redirect);
            // log action for debugging
            watchdog('catman_custom', 'ePub redirect created (update): %link_redirect', array('%link_redirect' => $redirect->source), WATCHDOG_NOTICE, $link = NULL);
        }

      }  // try

      // log any errors
      catch (Exception $e) {
        watchdog('catman_custom', 'ePub redirect update error: %exception', array('%exception' => $e), WATCHDOG_NOTICE, $link = NULL);
      }

    } // if $epubupload



    if ($previewupload !== FALSE) {

      $file_alias = str_replace('.pdf', '',$file->filename);

      // set redirect source paths
      $redirect_source = $file_alias . '/preview';

      $redirect_destination = variable_get('file_public_path', conf_path() . '/files') . '/' . str_replace('public://', '', $file->uri);

      try {
        // create redirect class with redirect values
        $redirect = new stdClass();

        redirect_object_prepare(
          $redirect,
          array(
            'source' => $redirect_source,
            'source_options' => array(),
            'redirect' => $redirect_destination,
            'redirect_options' => array(),
            'language' => LANGUAGE_NONE,
          )
        );

        // delete invalid redirect if it exists
        if (redirect_delete_by_path($redirect_source)) {

          // log deletion
          $delete_redirect = new stdClass();
          $delete_redirect->source = $redirect_source;

          watchdog('catman_custom', 'Preview redirect deleted: %delete_redirect', array('%delete_redirect' => $delete_redirect->source), WATCHDOG_NOTICE, $link = NULL);

        }

        // now add correct redirect
        if (!redirect_load_by_source($redirect_source)) {
          redirect_save($redirect);
            // log action for debugging
            watchdog('catman_custom', 'Preview redirect created (update): %link_redirect', array('%link_redirect' => $redirect->source), WATCHDOG_NOTICE, $link = NULL);
        }

      }  // try

      // log any errors
      catch (Exception $e) {
        watchdog('catman_custom', 'Preview redirect update error: %exception', array('%exception' => $e), WATCHDOG_NOTICE, $link = NULL);
      }

    } // if $previewupload


    if ($excelupload !== FALSE) {

      $ext = '.' . pathinfo($file->filename, PATHINFO_EXTENSION);

      $file_alias = str_replace($ext, '', $file->filename);

      // set redirect source paths
      $redirect_source = $file_alias . '/excel';

      $redirect_destination = variable_get('file_public_path', conf_path() . '/files') . '/' . str_replace('public://', '', $file->uri);

      try {
        // create redirect class with redirect values
        $redirect = new stdClass();

        redirect_object_prepare(
          $redirect,
          array(
            'source' => $redirect_source,
            'source_options' => array(),
            'redirect' => $redirect_destination,
            'redirect_options' => array(),
            'language' => LANGUAGE_NONE,
          )
        );

        // delete invalid redirect if it exists
        if (redirect_delete_by_path($redirect_source)) {

          // log deletion
          $delete_redirect = new stdClass();
          $delete_redirect->source = $redirect_source;

          watchdog('catman_custom', 'excel redirect deleted: %delete_redirect', array('%delete_redirect' => $delete_redirect->source), WATCHDOG_NOTICE, $link = NULL);

        }

        // now add correct redirect
        if (!redirect_load_by_source($redirect_source)) {
          redirect_save($redirect);
            // log action for debugging
            watchdog('catman_custom', 'excel redirect created (update): %link_redirect', array('%link_redirect' => $redirect->source), WATCHDOG_NOTICE, $link = NULL);
        }

      }  // try

      // log any errors
      catch (Exception $e) {
        watchdog('catman_custom', 'excel redirect update error: %exception', array('%exception' => $e), WATCHDOG_NOTICE, $link = NULL);
      }

    } // if $excelupload

    watchdog('file', t('%file has been updated. URI is %uri', array('%file' => $file->filename, '%uri' => $file->uri)));

  } // if file

}

/**
 * Implements hook_file_delete().
 * delete magic pdf link (redirect)
 * delete magic epub link (redirect)
 * delete magic preview link (redirect)
 *
 * TODO: Correct behaviour - When a existing file is removed and then uploaded before
 *       submitting the form the redirect is deleted and not added back. The file entity
 *       redirect is also removed and not recreated, might be a redirect bug
 */
function catman_custom_file_delete($file) {

  if ( ($file->type == 'pdf_document' || $file->type == 'epub_document' || $file->type == 'excel_file' || $file->type == 'undefined') && ($file->status == 1) ) {

    $pdfupload = strpos($file->uri, 'project/pdf'); // create/delete pdf redirect flag
    $epubupload = strpos($file->uri, 'project/epub'); // create/delete epub redirect flag
    $previewupload = strpos($file->uri, 'project/preview'); // create/delete preview redirect flag
    $excelupload  = strpos($file->uri, 'project/excel'); // create/delete excel redirect flag

    if ($pdfupload !== FALSE) {

      $file_alias = str_replace('.pdf', '', $file->filename);

      // set redirect source paths
      $redirect_source = $file_alias . '/viewfile';

      $redirect_destination = variable_get('file_public_path', conf_path() . '/files') . '/' . str_replace('public://', '', $file->uri);

      try {

        // delete invalid redirect if it exists
        if (redirect_delete_by_path($redirect_source)) {
          // log deletion
          $delete_redirect = new stdClass();
          $delete_redirect->source = $redirect_source;

          watchdog('catman_custom', 'PDF redirect deleted: %delete_redirect', array('%delete_redirect' => $delete_redirect->source), WATCHDOG_NOTICE, $link = NULL);
        }

      } // try

      // log any errors
      catch (Exception $e) {
        watchdog('catman_custom', 'PDF redirect delete error: %exception', array('%exception' => $e), WATCHDOG_NOTICE, $link = NULL);
      }

    } // if ($pdfupload


    if ($epubupload !== FALSE) {

      $file_alias = str_replace('.epub', '', $file->filename);

      // set redirect source paths
      $redirect_source = $file_alias . '/epub';

      $redirect_destination = variable_get('file_public_path', conf_path() . '/files') . '/' . str_replace('public://', '', $file->uri);

      try {

        // delete invalid redirect if it exists
        if (redirect_delete_by_path($redirect_source)) {
          // log deletion
          $delete_redirect = new stdClass();
          $delete_redirect->source = $redirect_source;

          watchdog('catman_custom', 'ePub redirect deleted: %delete_redirect', array('%delete_redirect' => $delete_redirect->source), WATCHDOG_NOTICE, $link = NULL);
        }

      } // try

      // log any errors
      catch (Exception $e) {
        watchdog('catman_custom', 'ePub redirect delete error: %exception', array('%exception' => $e), WATCHDOG_NOTICE, $link = NULL);
      }

    } // if (epubupload


    if ($previewupload !== FALSE) {

      $file_alias = str_replace('.pdf', '', $file->filename);

      // set redirect source paths
      $redirect_source = $file_alias . '/preview';

      $redirect_destination = variable_get('file_public_path', conf_path() . '/files') . '/' . str_replace('public://', '', $file->uri);

      try {

        // delete invalid redirect if it exists
        if (redirect_delete_by_path($redirect_source)) {
          // log deletion
          $delete_redirect = new stdClass();
          $delete_redirect->source = $redirect_source;

          watchdog('catman_custom', 'Preview redirect deleted: %delete_redirect', array('%delete_redirect' => $delete_redirect->source), WATCHDOG_NOTICE, $link = NULL);
        }

      } // try

      // log any errors
      catch (Exception $e) {
        watchdog('catman_custom', 'Preview redirect delete error: %exception', array('%exception' => $e), WATCHDOG_NOTICE, $link = NULL);
      }

    } // if (previewupload


    if ($excelupload !== FALSE) {

      $ext = '.' . pathinfo($file->filename, PATHINFO_EXTENSION);

      $file_alias = str_replace($ext, '', $file->filename);

      // set redirect source paths
      $redirect_source = $file_alias . '/excel';

      $redirect_destination = variable_get('file_public_path', conf_path() . '/files') . '/' . str_replace('public://', '', $file->uri);

      try {

        // delete invalid redirect if it exists
        if (redirect_delete_by_path($redirect_source)) {
          // log deletion
          $delete_redirect = new stdClass();
          $delete_redirect->source = $redirect_source;

          watchdog('catman_custom', 'Excel redirect deleted: %delete_redirect', array('%delete_redirect' => $delete_redirect->source), WATCHDOG_NOTICE, $link = NULL);
        }

      } // try

      // log any errors
      catch (Exception $e) {
        watchdog('catman_custom', 'Excel redirect delete error: %exception', array('%exception' => $e), WATCHDOG_NOTICE, $link = NULL);
      }

    } // if (excelupload

    watchdog('file', t('%file has been deleted. URI was %uri', array('%file' => $file->filename, '%uri' => $file->uri)));

  } // if ( ($file->type

}


/**
 * Implements hook_library().
 */
function catman_custom_library() {
  $libraries['jquery_ui_spinner'] = array(
    'title' => 'jQuery Spinner',
    'website' => 'http://github.com/btburnett3/jquery.ui.spinner/',
    'version' => '1.8',
    'js' => array(
      libraries_get_path('jquery_ui_spinner') . '/ui.spinner.min.js' => array(),
    ),
    'css' => array(
      libraries_get_path('jquery_ui_spinner') . '/ui.spinner.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui.widget'),
    ),
  );
  $library = libraries_get_path('stacktable.js');

  $libraries['stacktable.js'] = array(
    'title' => 'Stacktable.js',
    'website' => 'http://johnpolacek.github.io/stacktable.js',
    'download url' => 'https://github.com/johnpolacek/stacktable.js/zipball/master',
    'version' => array(),
    'js' => array(
      $library . '/stacktable.js' => array(
        'scope' => 'header',
      ),
    ),
    'css' => array(
      $library . '/stacktable.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );
  return $libraries;
}






/**
* Implements hook_form_alter().
*/
function catman_custom_form_alter(&$form, &$form_state, $form_id) {

  //dpm($form, 'form array');
  if (strstr($form_id, 'commerce_cart_add_to_cart_form')) {
    $form['#attached']['library'][] = array('catman_custom', 'jquery_ui_spinner');
    $form['#attached']['js'][] = drupal_get_path('module', 'catman_custom') . '/js/catman_custom.js';
  }


  if (strstr($form_id, 'commerce_cart_add_to_cart_form')) {

      // Add quantity spinner widget
    //$form['quantity']['#attached'] = array('jquery_ui_spinner');

        $form['quantity']['#attached'] = array('jquery_ui_spinner');


    $form['quantity']['#title'] = t('Enter quantity : ');

  }

  switch ($form_id) {

    case 'osu_catalog_publication_node_form':
      $form['field_supplemental_file']['und'][0]['#description'] = t('');

      break;


    case 'commerce_checkout_form_review':
      global $user;
      if (in_array('OSU affiliate', array_values($user->roles)) || in_array('Reseller', array_values($user->roles)) || in_array('PNW', array_values($user->roles)) ) {
        $form['commerce_payment']['payment_method']['#options']['commerce_purchase_order|commerce_payment_commerce_purchase_order'] = t('Purchase order or OSU index');
        $form['commerce_payment']['payment_details']['po_number']['#title'] = t('PO or index number');
      }

    break;

    case 'commerce_checkout_form_checkout':
    case 'commerce_checkout_form_review':
      $form['#attached']['library'][] = array('catman_custom', 'stacktable.js');
      $form['#attached']['js'][] = drupal_get_path('module', 'catman_custom') . '/js/stacktable.module.js';

      // We don't know if other view tables exist.
      $form['#attached']['js'][] = array(
        'data' => array('hivqld' => array(
          'table' => '.' . drupal_html_class($form_id) . ' .views-table'),
        ),
        'type' => 'setting',
      );
    break;
  }
}



/**
 * Allows modules to alter the default content creation page.
 *
 * Worekbench supplies a Create Content tab which emulates core's
 * node/add page. The render array for this page may be modified
 * by other modules.
 *
 * @param $output
 *  A Render API array of content items, passed by reference.
 *
 * @see workbench_create()
 */
function catman_custom_workbench_create_alter(&$output) {
  // Example taken from Workbench Media module.

  // Mimic node_add_page() theming.
  $items = array(
    array(
      'title' => t('Project'),
      'href' => 'node/add/osu-catalog-publication',
      'localized_options' => array(),
      'description' => t('Create new <em>Project</em> (publication).'),
    )
  );
  $output['field_workbench_create_media'] = array(
    '#title' => t('Add new project'),
    '#markup' => theme('node_add_list', array('content' => $items)),
    '#theme' => 'workbench_element',
    '#weight' => -1,
  );
}


/**
* Implements hook_menu_alter.
* Unset the view drafts tab (workbench_moderation).
*/
function catman_custom_menu_alter(&$items) {
  // Unset core path
  unset($items["node/%node/draft"]);
  unset($items["admin/content/webform/mysql"]);
  unset($items["admin/workbench/create/node/add/estimates-expenses"]);
  unset($items["node/add/add-product"]);

  // Re-point the /admin/user/user/create path back to the User module's
  // callback, since Views is taking over /admin/user/user.
  $items['admin/people/create']['page callback'] = 'user_admin';
  $items['admin/people/create']['file'] = 'user.admin.inc';

}

/**
* Implements hook_workbench_content_alter.
* Add catman views to my workbench.
*/
function catman_custom_workbench_content_alter(&$output) {

  $output['workbench_current_user'] = array(
    // '#title' => t('My Profile'),
    '#view' => 'workbench_current_user',
    '#view_display' => 'block_1',
    '#attributes' => array('class' => array('left', 'clearfix')),
    '#theme' => 'workbench_element',
    '#weight' => '-20',
  );


  // This right column is given a width of 65% by workbench.myworkbench.css.
  // store manager
  $output['help_links'] = array(
    '#view' => 'help_links',
    '#view_display' => 'block_1',
    '#attributes' => array('class' => array('right', 'clearfix')),
    '#theme' => 'workbench_element',
    '#weight' => '-15',
  );

  $output['help_links_pm'] = array(
    '#view' => 'help_links_pm',
    '#view_display' => 'block_1',
    '#attributes' => array('class' => array('right', 'clearfix')),
    '#theme' => 'workbench_element',
    '#weight' => '-15',
  );

  $output['catman_orders'] = array(
    '#view' => 'catman_orders',
    '#view_display' => 'block_1',
    '#attributes' => array('class' => array('right', 'clearfix')),
    '#theme' => 'workbench_element',
    '#weight' => '-10',
  );


  $output['catman_inventory'] = array(
    '#view' => 'catman_inventory',
    '#view_display' => 'block_1',
    '#attributes' => array('class' => array('right', 'clearfix')),
    '#theme' => 'workbench_element',
    '#weight' => '-8',
  );


  $output['workbench_edited'] = array(
    '#view' => 'workbench_edited',
    '#view_display' => 'block_1',
    '#attributes' => array('class' => array('right', 'clearfix')),
    '#theme' => 'workbench_element',
    '#weight' => '-5',
  );

  $output['master_proposal_list'] = array(
    '#view' => 'master_proposal_list',
    '#view_display' => 'proposals',
    '#attributes' => array('class' => array('clearfix'), 'style' => array('clear: both;')),
    '#theme' => 'workbench_element',
    '#weight' => '10',
  );

}

